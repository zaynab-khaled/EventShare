package ajman.university.grad.project.eventshare.common.services;


import ajman.university.grad.project.eventshare.common.contracts.ILocalNotificationService;
import ajman.university.grad.project.eventshare.common.helpers.ApplicationContextProvider;
import ajman.university.grad.project.eventshare.common.helpers.Constants;
import ajman.university.grad.project.eventshare.common.models.Event;
import ajman.university.grad.project.eventshare.user.MainActivity;
import ajman.university.grad.project.eventshare.user.R;
import ajman.university.grad.project.eventshare.user.RegisterActivity;
import android.app.Notification;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.support.v4.app.NotificationCompat;
import android.support.v4.app.TaskStackBuilder;
import android.util.Log;


public class LocalNotificationService implements ILocalNotificationService {
	private static final String LOG_TAG = "LocalNotificationService";
	
	@Override
	public void showNotification(Event event) {
		if (0 == 1) {
			// Get the launch activity so we can place it in the pending intent
	        PackageManager pm = getApplicationContext().getPackageManager();
	        Intent launchIntent = pm.getLaunchIntentForPackage(Constants.LAUNCH_PACKAGE_NAME);
	
	        // Let the notification get into the activity but make sure that the activity behaves well in back-pressed
	        // situation
	        TaskStackBuilder taskStackBuilder = TaskStackBuilder.create(getApplicationContext());
	        taskStackBuilder.addNextIntentWithParentStack(launchIntent);
	        PendingIntent pendingIntent = taskStackBuilder.getPendingIntent(0, PendingIntent.FLAG_UPDATE_CURRENT);
	
	        String title = getEventTitle(event);
	        String subtitle = getEventSubtitle(event);
	        String message = getEventMessage(event);
	
	        // Add the Big Text Style
	        NotificationCompat.BigTextStyle bigTextStyle = new NotificationCompat.BigTextStyle();
	        bigTextStyle.setBigContentTitle(title)
	            .setSummaryText(message)
	            .bigText(subtitle);
	        
	        NotificationCompat.Builder builder = new NotificationCompat.Builder(getApplicationContext());
	        builder.setContentTitle(title)
	               .setContentText(message)
	               .setContentIntent(pendingIntent)
	               .setAutoCancel(true)
	               .setStyle(bigTextStyle);
	        
	        Log.d(LOG_TAG, "Inside Notification");
	        Notification notification = builder.build();
	        NotificationManager mgr = (NotificationManager) getApplicationContext().getSystemService(Context.NOTIFICATION_SERVICE);
	        Log.d(LOG_TAG, "Inside Notification - mgr: " + mgr);
	        mgr.notify(this.getClass().getName(), event.getId(), notification);
		} else {
			Intent resultIntent = new Intent(this, MainActivity.class);
			// Because clicking the notification opens a new ("special") activity, there's
			// no need to create an artificial back stack.
			PendingIntent resultPendingIntent =
			    PendingIntent.getActivity(this,0,resultIntent,PendingIntent.FLAG_UPDATE_CURRENT);
			
			NotificationCompat.Builder mBuilder =
				    new NotificationCompat.Builder(RegisterActivity.this)
					.setSmallIcon(R.drawable.ic_launcher)
				    .setContentTitle("My notification")
				    .setContentText("Hello World!");
			
			mBuilder.addAction(R.drawable.ic_launcher_custom, "This is a test", resultPendingIntent);
			
			// Sets an ID for the notification
			int mNotificationId = 001;
			
			// Gets an instance of the NotificationManager service
			NotificationManager mNotifyMgr = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);
			
			// Builds the notification and issues it.
			mNotifyMgr.notify(mNotificationId, mBuilder.build());	
		}
    }

    public void removeNotification(Event event) {
        NotificationManager mgr = (NotificationManager) getApplicationContext().getSystemService(Context.NOTIFICATION_SERVICE);
        mgr.cancel(this.getClass().getName(), event.getId());
    }

    private String getEventTitle(Event event) {
    	// TODO:
    	return "title";
    }

    private String getEventSubtitle(Event event) {
    	// TODO:
    	return "subtitle";
    }

    private String getEventMessage(Event event) {
    	// TODO:
    	return "message";
    }

    private Context getApplicationContext() {
		return ApplicationContextProvider.getContext();		
	}
}
